pipeline{
    // agent {
    //     node {
    //         label "linux-node"
    //     }
    // }
    parameters {
      choice(
        name: 'DEPLOY_ENV',
        choices: [
            'none',
            'test',
            'staging',
            'production'
        ],
        description: 'Choose where to deploy'
      )
      gitParameter branchFilter: 'origin/(.*)', defaultValue: 'main', name: 'BRANCH', type: 'PT_BRANCH'
    }
    environment {
        HOME = "${WORKSPACE}"
        DOTNET_CLI_HOME = "/tmp/DOTNET_CLI_HOME"
    }
    stages {
        // stage ("Initialize") {
        //     agent {
        //         node {
        //             label 'linux-node'
        //         }
        //     }
        //     steps{
        //         script {
        //             FAILED_STAGE = env.STAGE_NAME
        //             config = readJSON file: "${WORKSPACE}/src/Boligmappa.ProfessionalServices/scripts/config.json"
        //             environmentName = params.DEPLOY_ENV;
        //             roleArn = config["deployEnvironments"][environmentName].roleArn;
        //             accountId = config["deployEnvironments"][environmentName].accountId;
        //             println "account - ${accountId}"
        //         }
        //     }
        // }
        stage ("Checkout") {
            // agent {
            //     node {
            //         label "linux-node"
            //         customWorkspace "${WORKSPACE}"
            //     }
            // }
            steps{
                script {
                    FAILED_STAGE = env.STAGE_NAME
                    echo "$params.BRANCH"
                }
                git branch: params.BRANCH, 
                        credentialsId: 'GIT',
                        url: "https://bitbucket.org/boligmappa/professional-microservices"
            }
        }
        stage ("Deploy Test") {
            // agent {
            //     docker { 
            //         image 'boligmappa/aws-cdk-dotnet:v1.0.0'
            //         args "-v /etc/passwd:/etc/passwd -u root --privileged"
            //         reuseNode true
            //     } 
            // }
            when {
                expression { params.DEPLOY_ENV == 'test'}
            }
            steps{
                script {
                    FAILED_STAGE = env.STAGE_NAME
                }
                // dir("${WORKSPACE}/src/Boligmappa.ConfirmFileUpload/Boligmappa.ConfirmFileUploadLambda") {
                //     sh 'dotnet lambda package -o Boligmappa.ConfirmFileUploadLambda.zip'
                // }
                // dir("${WORKSPACE}/src/Boligmappa.ConfirmFileUpload/Boligmappa.ConfirmFileUploadCdk") {
                //     withAWS(region: 'eu-central-1') {
                //         sh """cdk bootstrap aws://${accountId}/eu-central-1 -c envName=test"""
                //         sh "cdk deploy -c envName=test --require-approval=never"
                //     }
                // }
                sh """echo 'test'"""
            }
        }
        stage ("Deploy Staging") {
            // agent {
            //     docker { 
            //         image 'boligmappa/aws-cdk-dotnet:v1.0.0'
            //         args "-v /etc/passwd:/etc/passwd -u root --privileged"
            //         reuseNode true
            //     } 
            // }
            when {
                expression { params.DEPLOY_ENV == 'staging'}
            }
            steps{
                // script {
                //     FAILED_STAGE = env.STAGE_NAME
                // }
                // dir("${WORKSPACE}/src/Boligmappa.ConfirmFileUpload/Boligmappa.ConfirmFileUploadLambda") {
                //     sh 'dotnet lambda package -o Boligmappa.ConfirmFileUploadLambda.zip'
                // }
                // dir("${WORKSPACE}/src/Boligmappa.ConfirmFileUpload/Boligmappa.ConfirmFileUploadCdk") {
                //     withAWS(role: roleArn, region: 'eu-central-1') {
                //         sh """cdk bootstrap aws://${accountId}/eu-central-1 -c envName=staging"""
                //         sh "cdk deploy -c envName=staging --require-approval=never"
                //     }
                // }


                //  withAWS(role: roleArn, region: 'eu-central-1') {
                //                 sh """dotnet lambda package"""
                //                 sh """ cdk bootstrap aws://${accountId}/eu-central-1  """
                //                 sh  """ cdk deploy BedriftApiGatewayActualStack --context version=v1 --context authorizerCredentials=${envConfig.authorizerCredentials} --context authorizerUri=${envConfig.authorizerUri} --require-approval=never""" 
                //             }
                sh """echo 'staging'"""
            }
        }
        stage ("Deploy Production") {
            // agent {
            //     docker { 
            //         image 'boligmappa/aws-cdk-dotnet:v1.0.0'
            //         args "-v /etc/passwd:/etc/passwd -u root --privileged"
            //         reuseNode true
            //     } 
            // }
            when {
                expression { params.DEPLOY_ENV == 'production'}
            }
            steps{
                // script {
                //     FAILED_STAGE = env.STAGE_NAME
                // }
                // dir("${WORKSPACE}/src/Boligmappa.ConfirmFileUpload/Boligmappa.ConfirmFileUploadLambda") {
                //     sh 'dotnet lambda package -o Boligmappa.ConfirmFileUploadLambda.zip'
                // }
                // dir("${WORKSPACE}/src/Boligmappa.ConfirmFileUpload/Boligmappa.ConfirmFileUploadCdk") {
                //     withAWS(role: roleArn, region: 'eu-central-1') {
                //         sh """cdk bootstrap aws://${accountId}/eu-central-1 -c envName=production"""
                //         sh "cdk deploy -c envName=production --require-approval=never"
                //     }
                // }
                sh """echo 'prod'"""
            }
        }
    }
    post {
      failure {
          echo 'Failed ConfirmFileUpload job' 
        //   slackSend color: "danger", message: "*${currentBuild.currentResult}*: ${env.JOB_NAME} with buildnumber ${env.BUILD_NUMBER} \n*FAILED STAGE* : ${FAILED_STAGE}\n*MORE INFO AT*: ${env.BUILD_URL}"
      }
      success {
          echo 'Professional ConfirmFileUpload job success'
        //   slackSend color: "good", message: "*${currentBuild.currentResult}*: ${env.JOB_NAME} with buildnumber ${env.BUILD_NUMBER} \n*MORE INFO AT*: ${env.BUILD_URL}"
      }
      always {
          echo 'Cleaning up workspace'
          cleanWs()
      }
    }
}