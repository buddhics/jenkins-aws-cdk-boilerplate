pipeline{
    agent any
    parameters {
      choice(
        name: 'DEPLOY_ENV',
        choices: [
            'none',
            'test',
            'staging',
            'production'
        ],
        description: 'Choose where to deploy'
      )
      gitParameter branchFilter: 'origin/(.*)', defaultValue: 'main', name: 'BRANCH', type: 'PT_BRANCH'
    }
    environment {
        HOME = "${WORKSPACE}"
        DOTNET_CLI_HOME = "/tmp/DOTNET_CLI_HOME"
    }
    stages {
        stage ("Checkout") {
            agent any
            steps{
                script {
                    FAILED_STAGE = env.STAGE_NAME
                    echo "$params.BRANCH"
                }
                git branch: params.BRANCH, 
                        credentialsId: 'github',
                        url: "git@github.com:buddhics/jenkins-aws-cdk-boilerplate.git"
            }
        }
        stage ("Deploy Test") {
            agent {
                docker { 
                    image 'boligmappa/aws-cdk-dotnet:v1.0.0'
                    args "-v /etc/passwd:/etc/passwd -u root --privileged"
                    reuseNode true
                } 
            }
            when {
                expression { params.DEPLOY_ENV == 'test'}
            }
            steps{
                script {
                    FAILED_STAGE = env.STAGE_NAME
                }
                dir("${WORKSPACE}/AWSLambdaFunction") {
                    sh 'dotnet lambda package'
                }
                dir("${WORKSPACE}/cdk-bolieplate") {
                    withAWS(role: <role-arn>, region: 'eu-central-1')
                        sh """${WORKSPACE}/../scripts/cdk.deploy.sh -r eu-central-1 -e test"""
                    }
                }
            }
        }
        stage ("Deploy Staging") {
            agent {
                docker { 
                    image 'boligmappa/aws-cdk-dotnet:v1.0.0'
                    args "-v /etc/passwd:/etc/passwd -u root --privileged"
                    reuseNode true
                } 
            }
            when {
                expression { params.DEPLOY_ENV == 'staging'}
            }
            steps{
                script {
                    FAILED_STAGE = env.STAGE_NAME
                }
                dir("${WORKSPACE}/AWSLambdaFunction") {
                    sh 'dotnet lambda package'
                }
                dir("${WORKSPACE}/cdk-bolieplate") {
                    withAWS(role: <role-arn>, region: 'eu-central-1')
                        sh """${WORKSPACE}/../scripts/cdk.deploy.sh -r eu-central-1 -e stage"""
                    }
                }
            }
        }
        stage ("Deploy Production") {
            agent {
                docker { 
                    image 'boligmappa/aws-cdk-dotnet:v1.0.0'
                    args "-v /etc/passwd:/etc/passwd -u root --privileged"
                    reuseNode true
                } 
            }
            when {
                expression { params.DEPLOY_ENV == 'production'}
            }
            steps{
                script {
                    FAILED_STAGE = env.STAGE_NAME
                }
                dir("${WORKSPACE}/AWSLambdaFunction") {
                    sh 'dotnet lambda package'
                }
                dir("${WORKSPACE}/cdk-bolieplate") {
                    withAWS(role: <role-arn>, region: 'eu-central-1')
                        sh """${WORKSPACE}/../scripts/cdk.deploy.sh -r eu-central-1 -e prod"""
                    }
                }
            }
        }
    }
    post {
      failure {
          echo 'Failed CDK job' 
          slackSend color: "danger", message: "*${currentBuild.currentResult}*: ${env.JOB_NAME} with buildnumber ${env.BUILD_NUMBER} \n*FAILED STAGE* : ${FAILED_STAGE}\n*MORE INFO AT*: ${env.BUILD_URL}"
      }
      success {
          echo 'CDK job success'
          slackSend color: "good", message: "*${currentBuild.currentResult}*: ${env.JOB_NAME} with buildnumber ${env.BUILD_NUMBER} \n*MORE INFO AT*: ${env.BUILD_URL}"
      }
      always {
          echo 'Cleaning up workspace'
          cleanWs()
      }
    }
}